<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.16.0@2897ba636551a8cb61601cc26f6ccfbba6c36591">
  <file src="src/PHPUnit/Constraint/IsCurrentModuleNameConstraint.php">
    <PossiblyFalseArgument>
      <code><![CDATA[strrpos($appModules, '\\')]]></code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/PHPUnit/Constraint/LaminasConstraint.php">
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException(
                $this->createFailureMessage($failedException->getMessage()),
                $failedException->getComparisonFailure(),
            )]]></code>
    </InternalClass>
    <InternalMethod>
      <code>getComparisonFailure</code>
      <code><![CDATA[new ExpectationFailedException(
                $this->createFailureMessage($failedException->getMessage()),
                $failedException->getComparisonFailure(),
            )]]></code>
    </InternalMethod>
    <MixedArgument>
      <code><![CDATA[$controllerManager->get($controllerIdentifier)]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$controllerIdentifier</code>
      <code>$controllerManager</code>
      <code>$routeMatch</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>get</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getRouteMatch</code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/PHPUnit/Controller/AbstractControllerTestCase.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
    </DeprecatedMethod>
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting application exception, param "exception" does not exist'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf(
                    'Failed asserting matched route name was "%s", actual matched route name is "%s"',
                    $route,
                    $match
                )
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name "%s", actual action name is "%s"', $action, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name was NOT "%s"', $action)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class "%s", actual controller class is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name "%s", actual controller name is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code "%s", actual status code is "%s"', $code, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code was NOT "%s"', $code)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules WAS not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules are not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting application exception, param "exception" does not exist'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf(
                    'Failed asserting matched route name was "%s", actual matched route name is "%s"',
                    $route,
                    $match
                )
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name "%s", actual action name is "%s"', $action, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name was NOT "%s"', $action)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class "%s", actual controller class is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name "%s", actual controller name is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code "%s", actual status code is "%s"', $code, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code was NOT "%s"', $code)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules WAS not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules are not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
    </InternalMethod>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->getApplication()->getServiceManager()]]></code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code>$r</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$event</code>
      <code>$event</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$method</code>
      <code>$modulesLoaded</code>
      <code>$modulesLoaded</code>
      <code>$post</code>
      <code>$query</code>
      <code>$query</code>
      <code>$viewModel</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$list</code>
      <code>$list</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$event</code>
      <code>$exception</code>
      <code>$headers</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$match</code>
      <code>$method</code>
      <code>$moduleManager</code>
      <code>$moduleManager</code>
      <code>$modulesLoaded</code>
      <code>$modulesLoaded</code>
      <code>$post</code>
      <code>$query</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$viewModel</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>addHeaderLine</code>
      <code>detach</code>
      <code>getError</code>
      <code>getMatchedRouteName</code>
      <code>getModules</code>
      <code>getModules</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getResponse</code>
      <code>getRouteMatch</code>
      <code>getRouteMatch</code>
      <code>getRouteMatch</code>
      <code>getRouteMatch</code>
      <code>getRouteMatch</code>
      <code>getRouteMatch</code>
      <code>getViewModel</code>
      <code>setName</code>
      <code>setParam</code>
      <code>toArray</code>
      <code>toArray</code>
    </MixedMethodCall>
    <MoreSpecificReturnType>
      <code>ServiceManager</code>
    </MoreSpecificReturnType>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($controllerClass, '\\')]]></code>
      <code><![CDATA[strrpos($controllerClass, '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->application]]></code>
      <code><![CDATA[null !== $this->application]]></code>
      <code><![CDATA[null !== $this->application && null !== $this->applicationConfig]]></code>
      <code><![CDATA[null !== $this->applicationConfig]]></code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code>getTemplate</code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code>getHeaders</code>
      <code>getMethod</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getPost</code>
      <code>getQuery</code>
      <code>setMethod</code>
      <code>setPost</code>
      <code>setQuery</code>
      <code>setRequestUri</code>
      <code>setUri</code>
    </UndefinedInterfaceMethod>
    <UndefinedMethod>
      <code>setExpectedException</code>
    </UndefinedMethod>
  </file>
  <file src="src/PHPUnit/Controller/AbstractHttpControllerTestCase.php">
    <ArgumentTypeCoercion>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
      <code>createFailureMessage</code>
    </DeprecatedMethod>
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content "%s"',
                    $path,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT CONTAIN "%s"',
                    $header,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT MATCH regex "%s"',
                    $header,
                    $pattern
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content MATCHING "%s"',
                $path,
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT EXIST',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT OCCUR EXACTLY %d times',
                $path,
                $count
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT LEAST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT MOST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS EXACTLY %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node denoted by %s CONTAINS content MATCHING "%s", actual content is "%s"',
                $path,
                $pattern,
                implode('', $nodeValues)
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response DOES NOT redirect to URL MATCHING "%s"',
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" WAS NOT found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and contains "%s", actual content is "%s"',
                $header,
                $match,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and matches regex "%s", actual content is "%s"',
                $header,
                $pattern,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response is NOT a redirect, actual redirection is "%s"',
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s"',
                $url
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s", actual redirection is "%s"',
                $url,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to URL MATCHING "%s", actual redirection is "%s"',
                $pattern,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
            'Failed asserting node denoted by %s CONTAINS content "%s", Contents: [%s]',
            $path,
            $match,
            implode(',', $nodeValues)
        )))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content "%s"',
                    $path,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT CONTAIN "%s"',
                    $header,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT MATCH regex "%s"',
                    $header,
                    $pattern
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content MATCHING "%s"',
                $path,
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT EXIST',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT OCCUR EXACTLY %d times',
                $path,
                $count
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT LEAST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT MOST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS EXACTLY %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node denoted by %s CONTAINS content MATCHING "%s", actual content is "%s"',
                $path,
                $pattern,
                implode('', $nodeValues)
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response DOES NOT redirect to URL MATCHING "%s"',
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" WAS NOT found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and contains "%s", actual content is "%s"',
                $header,
                $match,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and matches regex "%s", actual content is "%s"',
                $header,
                $pattern,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response is NOT a redirect, actual redirection is "%s"',
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s"',
                $url
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s", actual redirection is "%s"',
                $url,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to URL MATCHING "%s", actual redirection is "%s"',
                $pattern,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
            'Failed asserting node denoted by %s CONTAINS content "%s", Contents: [%s]',
            $path,
            $match,
            implode(',', $nodeValues)
        )))]]></code>
    </InternalMethod>
    <InvalidReturnStatement>
      <code><![CDATA[$this->getResponse()->getHeaders()->get($header)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>HeaderInterface|false</code>
    </InvalidReturnType>
    <MixedArgument>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$response->getContent()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$currentValue</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
      <code>getFieldValue</code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$node->nodeValue]]></code>
    </MixedPropertyFetch>
    <PossiblyUndefinedVariable>
      <code>$currentHeader</code>
      <code>$currentHeader</code>
      <code>$currentHeader</code>
      <code>$currentHeader</code>
      <code>$node</code>
    </PossiblyUndefinedVariable>
    <RedundantCondition>
      <code>assertFalse</code>
      <code>assertTrue</code>
      <code>assertTrue</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>assertFalse</code>
      <code>assertFalse</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Util/ModuleLoader.php">
    <MixedArgument>
      <code>$smConfig</code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$configuration['module_listener_options']['module_paths'][$key]]]></code>
      <code><![CDATA[$configuration['modules'][]]]></code>
      <code>$module</code>
      <code>$smConfig</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>Application</code>
      <code>ModuleManager</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>loadModules</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->getServiceManager()->get('Application')]]></code>
      <code><![CDATA[$this->getServiceManager()->get('ModuleManager')]]></code>
    </MixedReturnStatement>
  </file>
  <file src="test/PHPUnit/Controller/AbstractControllerTestCaseTest.php">
    <InvalidArgument>
      <code>$haystack</code>
      <code>$haystack</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$message</code>
      <code>$message</code>
      <code><![CDATA[$this->getRequest()->getContent()]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$config['module_listener_options']['cache_dir']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$applicationConfig['module_listener_options']['module_paths']]]></code>
      <code><![CDATA[$applicationConfig['module_listener_options']['module_paths']['ModuleWithNamespace\TestModule']]]></code>
      <code><![CDATA[$applicationConfig['modules'][]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$config</code>
      <code>$file</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getError</code>
      <code>setParam</code>
      <code>setParam</code>
      <code>toString</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$config</code>
    </MixedOperand>
    <PossiblyUndefinedVariable>
      <code>$message</code>
      <code>$message</code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
    <UndefinedInterfaceMethod>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getQuery</code>
      <code>getRequestUri</code>
      <code>setMethod</code>
      <code>setMethod</code>
      <code>setMethod</code>
      <code>setMethod</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/PHPUnit/Controller/AbstractHttpControllerTestCaseTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['RuntimeException']]></code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code><![CDATA[$layout->getChildren()]]></code>
      <code>$messages</code>
      <code>$messages</code>
      <code>$messages</code>
      <code>$messages</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$controller</code>
      <code>$controller</code>
      <code>$controller</code>
      <code>$controller</code>
      <code>$flashMessenger</code>
      <code>$flashMessenger</code>
      <code>$flashMessenger</code>
      <code>$flashMessenger</code>
      <code>$layout</code>
      <code>$messages</code>
      <code>$messages</code>
      <code>$messages</code>
      <code>$messages</code>
      <code>$mvcEvent</code>
      <code>$routeMatch</code>
      <code>$routeMatch</code>
      <code>$viewModel</code>
      <code>$viewModel</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>flashMessenger</code>
      <code>flashMessenger</code>
      <code>flashMessenger</code>
      <code>flashMessenger</code>
      <code>get</code>
      <code>get</code>
      <code>get</code>
      <code>get</code>
      <code>getApplication</code>
      <code>getChildren</code>
      <code>getError</code>
      <code>getMessages</code>
      <code>getMessages</code>
      <code>getMessages</code>
      <code>getMessages</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getParam</code>
      <code>getPort</code>
      <code>getResult</code>
      <code>getResult</code>
      <code>getRouteMatch</code>
      <code>getTemplate</code>
      <code>getTemplate</code>
      <code>getTemplate</code>
      <code>getViewModel</code>
      <code>setParam</code>
      <code>setParam</code>
      <code>setPost</code>
      <code>setQuery</code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code>getMethod</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getMvcEvent</code>
      <code>getUri</code>
      <code>isXmlHttpRequest</code>
      <code>isXmlHttpRequest</code>
      <code>isXmlHttpRequest</code>
      <code>setMethod</code>
      <code>setMethod</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/PHPUnit/Controller/MemoryLeakTest.php">
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <PossiblyNullOperand>
      <code>self::$memStart</code>
    </PossiblyNullOperand>
  </file>
  <file src="test/PHPUnit/Util/ModuleLoaderTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Foo\Module']]></code>
      <code><![CDATA['ModuleWithNamespace\TestModule\Module']]></code>
      <code><![CDATA['stdClass']]></code>
    </ArgumentTypeCoercion>
    <MixedAssignment>
      <code>$baz</code>
      <code>$baz</code>
      <code>$baz</code>
      <code>$baz</code>
      <code>$file</code>
      <code>$foo</code>
      <code>$fooObject</code>
    </MixedAssignment>
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="test/_files/Baz/Module.php">
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="test/_files/Baz/src/Baz/Controller/IndexController.php">
    <MixedAssignment>
      <code>$numGet</code>
      <code>$numPost</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>addHeaderLine</code>
      <code>addHeaderLine</code>
      <code>addMessage</code>
      <code>get</code>
      <code>get</code>
    </MixedMethodCall>
    <MixedReturnTypeCoercion>
      <code><![CDATA[['num_get' => $numGet, 'num_post' => $numPost]]]></code>
      <code><![CDATA[array<string, string>]]></code>
    </MixedReturnTypeCoercion>
    <UndefinedInterfaceMethod>
      <code>getHeaders</code>
      <code>getPost</code>
      <code>getQuery</code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code>flashMessenger</code>
    </UndefinedMagicMethod>
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithEvents/Module.php">
    <MissingClosureParamType>
      <code>$e</code>
    </MissingClosureParamType>
    <PossiblyNullReference>
      <code>attach</code>
      <code>getMatchedRouteName</code>
    </PossiblyNullReference>
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
    <UnusedClosureParam>
      <code>$e</code>
    </UnusedClosureParam>
  </file>
  <file src="test/_files/ModuleWithNamespace/TestModule/Module.php">
    <PossiblyUnusedMethod>
      <code>getAutoloaderConfig</code>
      <code>getConfig</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/_files/ModuleWithNamespace/TestModule/src/Controller/IndexController.php">
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/Test/Module.php">
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/Test/src/Controller/IndexController.php">
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/TestModule/Module.php">
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/TestModule/src/Controller/IndexController.php">
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Bar/Module.php">
    <MissingClosureParamType>
      <code>$sm</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($sm) {</code>
    </MissingClosureReturnType>
    <MixedAssignment>
      <code>$foo</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>get</code>
    </MixedMethodCall>
    <MixedPropertyAssignment>
      <code>$foo</code>
    </MixedPropertyAssignment>
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Bar/src/Bar/Controller/IndexController.php">
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Foo/Module.php">
    <MissingClosureParamType>
      <code>$sm</code>
    </MissingClosureParamType>
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
    <UnusedClosureParam>
      <code>$sm</code>
    </UnusedClosureParam>
  </file>
  <file src="test/_files/modules-path/with-subdir/Foo/src/Foo/Controller/IndexController.php">
    <UnusedClass>
      <code>IndexController</code>
    </UnusedClass>
  </file>
</files>
